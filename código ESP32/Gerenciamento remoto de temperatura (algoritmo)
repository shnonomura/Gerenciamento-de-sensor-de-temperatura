#include "WiFi.h"
#include <WebServer.h>
#include <DNSServer.h>
#include <WiFiManager.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <Servo.h>
#include "FirebaseESP32.h"

#define DHTPIN 27     // Digital pin connected to the DHT sensor
#define TOUTCH_PIN T0 // ESP32 Pin D4
#define sensorChuva 26
#define FIREBASE_HOST "utfpr-oficina-iot.firebaseio.com"
#define FIREBASE_AUTH "xevREMS2OfC1kCr590fcGsXUvWoZtAJQXAbUA8AZ"

int touch_value = 100;
int ventiladorPin = 21;
int aquecedorPin = 22;
static const int servoPin1 = 25;
static const int servoPin2 = 33;
String janelaStatus = "";
String automaticoStatus = "";
String ventiladorStatus = "";
String aquecedorStatus = "";
String ventiladorAutomatico = "";
String aquecedorAutomatico = "";
String address = "";
float temperaturaAtual = 0;
String temperaturaMinima = "0";
String temperaturaMaxima = "0";
int aberta1 = 180;
int aberta2 = 0;
int fechada = 90;

bool chovendo = false;
bool ventilando = false;
bool aquecendo = false;
bool janelaAberta = false;

FirebaseJson ambienteData;
FirebaseJsonArray dispositivos;
Servo servo1;
Servo servo2;
FirebaseData firebaseData;

// Uncomment the type of sensor in use:
#define DHTTYPE    DHT11     // DHT 11

DHT dht(DHTPIN, DHTTYPE);

void fecharJanela() {
  servo1.write(fechada);
  servo2.write(fechada);
  Firebase.setString(firebaseData, address + "/janela", "false");
  janelaAberta = false;
}

void abrirJanela() {
  servo1.write(aberta1);
  servo2.write(aberta2);
  Firebase.setString(firebaseData, address + "/janela", "true");
  janelaAberta = true;
}

void desligarVentilador() {
  digitalWrite(ventiladorPin, HIGH);
  Firebase.setString(firebaseData, address + "/ventilador", "false");
}

void ligarVentilador() {
  digitalWrite(ventiladorPin, LOW);
  Firebase.setString(firebaseData, address + "/ventilador", "true");
}

void desligarAquecedor() {
  digitalWrite(aquecedorPin, HIGH);
  Firebase.setString(firebaseData, address + "/aquecedor", "false");
}

void ligarAquecedor() {
  digitalWrite(aquecedorPin, LOW);
  Firebase.setString(firebaseData, address + "/aquecedor", "true");
}

void verificarChuva() {
  chovendo = digitalRead(sensorChuva) == LOW;
  if (chovendo) {
    Firebase.setString(firebaseData, address + "/chuva", "true");
  } else {
    Firebase.setString(firebaseData, address + "/chuva", "false");
  }
}

void lerTemperatura() {
  temperaturaAtual = dht.readTemperature();
  String fireTemp = String(temperaturaAtual) + String("°C");
  Firebase.setString(firebaseData, address + "/temperatura", fireTemp);
}

void mudaJanela() {
  if (chovendo || temperaturaAtual < temperaturaMinima.toInt()) {
    fecharJanela();
  } else if (temperaturaAtual > temperaturaMaxima.toInt()) {
    abrirJanela();
  }
}

void mudaJanelaManual() {
  if (janelaStatus == "true") {
    abrirJanela();
  }
  else {
    fecharJanela();
  }
}

void mudaVentilador() {
  if (temperaturaAtual < temperaturaMaxima.toInt()) {
    desligarVentilador();
  }
  else if (temperaturaAtual > temperaturaMaxima.toInt()) {
    ligarVentilador();
  }
}

void mudaVentiladorManual() {
  if (ventiladorStatus == "true") {
    ligarVentilador();
  }
  else {
    desligarVentilador();
  }
}

void mudaAquecedor() {
  if (temperaturaAtual < temperaturaMinima.toInt() && !janelaAberta) {
    ligarAquecedor();
  } else {
    desligarAquecedor();
  }
}

void mudaAquecedorManual() {
  if (aquecedorStatus == "true") {
    ligarAquecedor();
  }
  else {
    desligarAquecedor();
  }
}

void lerDadosFirebase() {
  Firebase.getString(firebaseData, address + "/janela", janelaStatus);
  Serial.println("JanelaStatus " + janelaStatus);
  delay(50);
  Firebase.getString(firebaseData, address + "/automatico", automaticoStatus);
  Serial.println("automaticoStatus " + automaticoStatus);
  delay(50);
  Firebase.getString(firebaseData, address + "/aquecedorAutomatico", aquecedorAutomatico);
  Serial.println("aquecedorAutomatico " + aquecedorAutomatico);
  delay(50);
  Firebase.getString(firebaseData, address + "/ventiladorAutomatico", ventiladorAutomatico);
  Serial.println("ventiladorAutomatico " + ventiladorAutomatico);
  delay(50);
  Firebase.getString(firebaseData, address + "/ventilador", ventiladorStatus);
  Serial.println("ventiladorStatus " + ventiladorStatus);
  delay(50);
  Firebase.getString(firebaseData, address + "/aquecedor", aquecedorStatus);
  Serial.println("aquecedorStatus " + aquecedorStatus);
  delay(50);
  Firebase.getString(firebaseData, address + "/temperaturaMinima", temperaturaMinima);
  Serial.println("temperaturaMinima " + temperaturaMinima);
  delay(50);
  Firebase.getString(firebaseData, address + "/temperaturaMaxima", temperaturaMaxima);
  Serial.println("temperaturaMaxima " + temperaturaMaxima);
  delay(50);
}

//callback que indica que o ESP entrou no modo AP
void configModeCallback (WiFiManager *myWiFiManager) {
  //  Serial.println("Entered config mode");
  Serial.println("Entrou no modo de configuração");
  Serial.println(WiFi.softAPIP()); //imprime o IP do AP
  Serial.println(myWiFiManager->getConfigPortalSSID()); //imprime o SSID criado da rede
}

//callback que indica que salvamos uma nova rede para se conectar (modo estação)
void saveConfigCallback () {
  //  Serial.println("Should save config");
  Serial.println("Configuração salva");
  Serial.println(WiFi.softAPIP()); //imprime o IP do AP
}

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);
  pinMode(TOUTCH_PIN, INPUT);
  WiFiManager wifiManager;
  pinMode(sensorChuva, INPUT);
  pinMode (ventiladorPin, OUTPUT);
  pinMode (aquecedorPin, OUTPUT);

  servo1.attach(servoPin1);
  servo2.attach(servoPin2);
  servo1.write(fechada);
  servo2.write(fechada);

  dht.begin();

  wifiManager.setAPCallback(configModeCallback);
  wifiManager.setSaveConfigCallback(saveConfigCallback);
  wifiManager.autoConnect("ESP_AP", "12345678");

  Serial.println("MacAddress >>> " + WiFi.macAddress());
  address = WiFi.macAddress();

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);

  if (!Firebase.getJSON(firebaseData, address))
  {
    ambienteData.add("nomeAmbiente", "sala");
    ambienteData.add("ventilador", "false");
    ambienteData.add("janela", "false");
    ambienteData.add("temperatura", 23);
    ambienteData.add("chuva", "false");
    ambienteData.add("automatico", "true");
    ambienteData.add("temperaturaMaxima", "26");
    ambienteData.add("temperaturaMinima", "23");
    ambienteData.add("aquecedor", "false");
    ambienteData.add("aquecedorAutomatico", "false");
    ambienteData.add("ventiladorAutomatico", "false");
    Firebase.setJSON(firebaseData, address, ambienteData);
  }

  if (Firebase.getArray(firebaseData, "dispositivos"))
  {
    Firebase.getArray(firebaseData, "dispositivos", &dispositivos);
  }
  dispositivos.add(address);
  Firebase.setArray(firebaseData, "dispositivos", dispositivos);
}

void loop() {
  WiFiManager wifiManager;
  touch_value = touchRead(TOUTCH_PIN);
  if ( touch_value < 30 ) {
    Serial.println("resetar"); //tenta abrir o portal
    if (!wifiManager.startConfigPortal("ESP_AP", "12345678") ) {
      Serial.println("Falha ao conectar");
      delay(2000);
      ESP.restart();
      delay(1000);
    }
    Serial.println("Conectou ESP_AP!!!");
    Serial.println(WiFi.localIP());
  }

  delay(2000);

  lerDadosFirebase();
  lerTemperatura();
  verificarChuva();

  if (automaticoStatus == "true") {
    mudaJanela();
  } else {
    mudaJanelaManual();
  }

  if (ventiladorAutomatico == "true") {
    mudaVentilador();
  } else {
    mudaVentiladorManual();
  }

  if (aquecedorAutomatico == "true") {
    mudaAquecedor();
  } else {
    mudaAquecedorManual();
  }
}
